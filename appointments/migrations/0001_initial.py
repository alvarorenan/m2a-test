# Generated by Django 4.2.7 on 2025-08-01 21:17

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Servico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('preco', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Preço')),
                ('duracao_minutos', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Duração (minutos)')),
                ('categoria', models.CharField(choices=[('CABELO', 'Cabelo'), ('UNHAS', 'Unhas'), ('ESTETICA', 'Estética'), ('MASSAGEM', 'Massagem'), ('OUTROS', 'Outros')], default='OUTROS', max_length=50, verbose_name='Categoria')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
            ],
            options={
                'verbose_name': 'Serviço',
                'verbose_name_plural': 'Serviços',
                'ordering': ['categoria', 'nome'],
                'indexes': [models.Index(fields=['categoria'], name='appointment_categor_1cc6f7_idx'), models.Index(fields=['ativo'], name='appointment_ativo_098167_idx'), models.Index(fields=['preco'], name='appointment_preco_c935d9_idx')],
            },
        ),
        migrations.CreateModel(
            name='Profissional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('telefone', models.CharField(max_length=20, verbose_name='Telefone')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('horario_inicio', models.TimeField(default='08:00', verbose_name='Horário de Início')),
                ('horario_fim', models.TimeField(default='18:00', verbose_name='Horário de Fim')),
                ('dias_semana', models.CharField(default='1,2,3,4,5,6', help_text='Dias da semana separados por vírgula (1=Segunda, 7=Domingo)', max_length=20, verbose_name='Dias da Semana')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('especialidades', models.ManyToManyField(help_text='Serviços que este profissional pode realizar', to='appointments.servico', verbose_name='Especialidades')),
            ],
            options={
                'verbose_name': 'Profissional',
                'verbose_name_plural': 'Profissionais',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('telefone', models.CharField(max_length=20, verbose_name='Telefone')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('endereco', models.TextField(blank=True, verbose_name='Endereço')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
                'ordering': ['nome'],
                'indexes': [models.Index(fields=['nome'], name='appointment_nome_88e187_idx'), models.Index(fields=['telefone'], name='appointment_telefon_c07b84_idx'), models.Index(fields=['ativo'], name='appointment_ativo_7609d7_idx')],
            },
        ),
        migrations.CreateModel(
            name='Agendamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_hora', models.DateTimeField(verbose_name='Data e Hora')),
                ('status', models.CharField(choices=[('AGENDADO', 'Agendado'), ('CONFIRMADO', 'Confirmado'), ('EM_ANDAMENTO', 'Em Andamento'), ('CONCLUIDO', 'Concluído'), ('CANCELADO', 'Cancelado'), ('NAO_COMPARECEU', 'Não Compareceu')], default='AGENDADO', max_length=20, verbose_name='Status')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('preco_final', models.DecimalField(blank=True, decimal_places=2, help_text='Deixe vazio para usar o preço padrão do serviço', max_digits=8, null=True, verbose_name='Preço Final')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointments.cliente', verbose_name='Cliente')),
                ('profissional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointments.profissional', verbose_name='Profissional')),
                ('servico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointments.servico', verbose_name='Serviço')),
            ],
            options={
                'verbose_name': 'Agendamento',
                'verbose_name_plural': 'Agendamentos',
                'ordering': ['-data_hora'],
            },
        ),
        migrations.AddIndex(
            model_name='profissional',
            index=models.Index(fields=['nome'], name='appointment_nome_afdce5_idx'),
        ),
        migrations.AddIndex(
            model_name='profissional',
            index=models.Index(fields=['ativo'], name='appointment_ativo_5609df_idx'),
        ),
        migrations.AddIndex(
            model_name='agendamento',
            index=models.Index(fields=['data_hora'], name='appointment_data_ho_6b632c_idx'),
        ),
        migrations.AddIndex(
            model_name='agendamento',
            index=models.Index(fields=['status'], name='appointment_status_53b1a6_idx'),
        ),
        migrations.AddIndex(
            model_name='agendamento',
            index=models.Index(fields=['profissional', 'data_hora'], name='appointment_profiss_621484_idx'),
        ),
        migrations.AddIndex(
            model_name='agendamento',
            index=models.Index(fields=['cliente', 'data_hora'], name='appointment_cliente_da45f4_idx'),
        ),
        migrations.AddIndex(
            model_name='agendamento',
            index=models.Index(fields=['status', 'data_hora'], name='appointment_status_dbdd6a_idx'),
        ),
        migrations.AddIndex(
            model_name='agendamento',
            index=models.Index(fields=['status', 'data_hora', 'servico'], name='appointment_status_4ffbc1_idx'),
        ),
        migrations.AddConstraint(
            model_name='agendamento',
            constraint=models.UniqueConstraint(condition=models.Q(('status__in', ['CANCELADO', 'NAO_COMPARECEU']), _negated=True), fields=('profissional', 'data_hora'), name='unique_profissional_datetime_active'),
        ),
    ]
